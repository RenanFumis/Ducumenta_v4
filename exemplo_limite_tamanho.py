#!/usr/bin/env python3
"""
Exemplo de uso da funcionalidade de limite de tamanho de arquivos
"""

import asyncio
from pathlib import Path
from viewmodel.converter_vm import ConversorViewModel

async def exemplo_limite_tamanho():
    """Demonstra como configurar e usar o limite de tamanho"""
    
    # Cria inst√¢ncia do ViewModel
    vm = ConversorViewModel()
    
    # Configura o tamanho m√°ximo (em GB)
    print("=== Configura√ß√£o de Tamanho M√°ximo ===")
    
    # Exemplo 1: Limite padr√£o (1GB)
    print(f"Tamanho m√°ximo padr√£o: {vm.obter_tamanho_maximo()}GB")
    
    # Exemplo 2: Configurar para 2GB
    vm.configurar_tamanho_maximo(2)
    print(f"Tamanho m√°ximo configurado: {vm.obter_tamanho_maximo()}GB")
    
    # Exemplo 3: Configurar para 500MB
    vm.configurar_tamanho_maximo(0.5)
    print(f"Tamanho m√°ximo configurado: {vm.obter_tamanho_maximo()}GB")
    
    # Exemplo 4: Voltar para o padr√£o
    vm.configurar_tamanho_maximo(1)
    print(f"Tamanho m√°ximo configurado: {vm.obter_tamanho_maximo()}GB")
    
    print("\n=== Processo de Convers√£o com Limite ===")
    
    # Simula uma convers√£o (substitua pelos caminhos reais)
    origem = Path("pasta_origem")
    destino = Path("pasta_destino")
    
    if origem.exists():
        print(f"Convertendo arquivos de: {origem}")
        print(f"Para: {destino}")
        print(f"Tamanho m√°ximo por arquivo: {vm.obter_tamanho_maximo()}GB")
        
        # Fun√ß√£o de callback para status
        def atualizar_status(mensagem, erro=None):
            if erro:
                print(f"‚ùå Erro: {erro}")
            else:
                print(f"‚ÑπÔ∏è  {mensagem}")
        
        # Executa a convers√£o
        try:
            total_processado, erros = await vm.converter(origem, destino, atualizar_status)
            print(f"\n‚úÖ Convers√£o conclu√≠da!")
            print(f"üìä Arquivos processados: {total_processado}")
            print(f"‚ö†Ô∏è  Erros encontrados: {len(erros)}")
            
            if erros:
                print("\nüìã Lista de erros:")
                for erro in erros[:5]:  # Mostra apenas os primeiros 5 erros
                    print(f"   ‚Ä¢ {erro}")
                if len(erros) > 5:
                    print(f"   ‚Ä¢ ... e mais {len(erros) - 5} erros")
                    
        except Exception as e:
            print(f"‚ùå Falha na convers√£o: {e}")
    else:
        print("‚ö†Ô∏è  Pasta de origem n√£o encontrada. Crie a pasta 'pasta_origem' com arquivos para testar.")

def exemplo_configuracao_avancada():
    """Demonstra configura√ß√µes avan√ßadas"""
    
    print("\n=== Configura√ß√µes Avan√ßadas ===")
    
    # Diferentes cen√°rios de uso
    cenarios = [
        ("Arquivos pequenos (emails)", 0.1),  # 100MB
        ("Documentos padr√£o", 1),              # 1GB
        ("Arquivos grandes", 5),               # 5GB
        ("Sem limite", 100)                    # 100GB (praticamente sem limite)
    ]
    
    for nome, tamanho in cenarios:
        vm = ConversorViewModel()
        vm.configurar_tamanho_maximo(tamanho)
        print(f"üìÅ {nome}: {vm.obter_tamanho_maximo()}GB")

if __name__ == "__main__":
    print("üöÄ Exemplo de Uso - Limite de Tamanho de Arquivos")
    print("=" * 60)
    
    # Executa exemplos
    asyncio.run(exemplo_limite_tamanho())
    exemplo_configuracao_avancada()
    
    print("\n" + "=" * 60)
    print("üìö Para mais informa√ß√µes, consulte LIMITE_TAMANHO.md")
    print("üéØ O sistema automaticamente:")
    print("   ‚Ä¢ Verifica o tamanho dos arquivos")
    print("   ‚Ä¢ Otimiza imagens com compress√£o progressiva")
    print("   ‚Ä¢ Recomprime PDFs quando necess√°rio")
    print("   ‚Ä¢ Divide arquivos muito grandes em partes")
    print("   ‚Ä¢ Gera logs detalhados do processo") 